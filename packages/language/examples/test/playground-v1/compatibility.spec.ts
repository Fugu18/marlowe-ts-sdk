import * as fs from "fs/promises";
import { escrow, escrowWithCollateral } from "@marlowe.io/language-examples";
import * as G from "@marlowe.io/language-core-v1/guards";
import { MarloweJSON } from "@marlowe.io/adapter/codec";

import { fileURLToPath } from "url";
import { dirname } from "path";
import * as path from "path";

function goldenJSON(filename: string): Promise<unknown> {
  const __dirname = dirname(fileURLToPath(import.meta.url));
  const filepath = path.join(__dirname, "jsons", filename);
  return fs.readFile(filepath, "utf-8").then((data) => MarloweJSON.parse(data));
}

// Function adapted from this: https://stackoverflow.com/a/53593328/832361
function stableStringify(obj: unknown, space: number) {
  const allKeys = new Set<string>();

  MarloweJSON.stringify(obj, (key, value) => (allKeys.add(key), value));
  return MarloweJSON.stringify(obj, Array.from(allKeys).sort(), space);
}

// If two jsons that have bigint are not equal, the jest reporter fails to show the difference and
// with an exception that it cannot serialize the bigint. This function uses a custom json stringifier
// that sorts the keys so that the difference is clearer.
function cmpGolden(actual: unknown, expected: unknown) {
  expect(stableStringify(actual, 2)).toEqual(stableStringify(expected, 2));
}
/**
 * This suite tests that the Playground examples adapted using the `playground-compatibility.md` guide
 * produces the same output as a golden file generated by the "Download JSON" feature in the playground.
 */
describe("laguage-core-v1/playground-v1", () => {
  describe("escrow", () => {
    const escrowParams = {
      // 1 ADA
      price: 1000000,
      // 03 Oct 2023 00:00 GMT-3
      depositTimeout: 1696302000000n,
      // 03 Oct 2023 00:05 GMT-3
      disputeTimeout: 1696302300000n,
      // 03 Oct 2023 00:10 GMT-3
      answerTimeout: 1696302600000n,
      // 03 Oct 2023 00:15 GMT-3
      arbitrageTimeout: 1696302900000n,
    };
    it("The contract produces a valid contract", () => {
      expect(G.Contract.is(escrow(escrowParams))).toBe(true);
    });
    it("The contract produces the same output as the golden file", async () => {
      const golden = await goldenJSON("escrow.json");
      cmpGolden(escrow(escrowParams), golden);
    });
  });
  describe("escrow with collateral", () => {
    const escrowParams = {
      // 1 ADA
      price: 1000000,
      // 2 ADA
      collateral: 2000000,
      // 03 Oct 2023 00:00 GMT-3
      sellerCollateralTimeout: 1696302000000n,
      // 03 Oct 2023 00:05 GMT-3
      buyerCollateralTimeout: 1696302300000n,
      // 03 Oct 2023 00:10 GMT-3
      depositTimeout: 1696302600000n,
      // 03 Oct 2023 00:15 GMT-3
      disputeTimeout: 1696302900000n,
      // 03 Oct 2023 00:20 GMT-3
      answerTimeout: 1696303200000n,
    };
    it("The contract produces a valid contract", () => {
      expect(G.Contract.is(escrowWithCollateral(escrowParams))).toBe(true);
    });
    it("The contract produces the same output as the golden file", async () => {
      const golden = await goldenJSON("escrow-with-collateral.json");
      cmpGolden(escrowWithCollateral(escrowParams), golden);
    });
  });
});
